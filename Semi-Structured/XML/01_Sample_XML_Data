-- Preping sample data from QA  
SELECT TOP 10000 * FROM DDE.dbo.TransUnion ORDER BY 1 DESC;
-- just the select took 53 minutes from ssms , exported csv file size 2,693,339 KB 



use role sysadmin;

-- create database and schema 
CREATE OR REPLACE TRANSIENT DATABASE TEST_XML_DATA DATA_RETENTION_TIME_IN_DAYS = 1;

use database TEST_XML_DATA;
CREATE OR REPLACE TRANSIENT SCHEMA TEST DATA_RETENTION_TIME_IN_DAYS = 1;

show databases like '%TEST_XML_DATA%';

-- permissions
GRANT CREATE SCHEMA, MODIFY, MONITOR, REFERENCE_USAGE, USAGE ON DATABASE "TEST_XML_DATA" TO ROLE "PUBLIC" WITH GRANT OPTION;

GRANT ADD SEARCH OPTIMIZATION, CREATE EXTERNAL TABLE, CREATE FILE FORMAT, CREATE FUNCTION, CREATE MASKING POLICY, CREATE MATERIALIZED VIEW, CREATE PIPE, CREATE PROCEDURE, CREATE SEQUENCE, CREATE STAGE, CREATE STREAM, CREATE TABLE, CREATE TASK, CREATE TEMPORARY TABLE, CREATE VIEW, MODIFY, MONITOR, USAGE 
ON SCHEMA "TEST_XML_DATA"."TEST" TO ROLE "SYSADMIN" WITH GRANT OPTION;

GRANT ADD SEARCH OPTIMIZATION, CREATE EXTERNAL TABLE, CREATE FILE FORMAT, CREATE FUNCTION, CREATE MASKING POLICY, CREATE MATERIALIZED VIEW, CREATE PIPE, CREATE PROCEDURE, CREATE SEQUENCE, CREATE STAGE, CREATE STREAM, CREATE TABLE, CREATE TASK, CREATE TEMPORARY TABLE, CREATE VIEW, MODIFY, MONITOR, USAGE 
ON SCHEMA "TEST_XML_DATA"."TEST" TO ROLE "PUBLIC" WITH GRANT OPTION;

-- set context 
use role public;
use database TEST_XML_DATA;
use schema test;

-- test data creation 
CREATE OR REPLACE TRANSIENT TABLE test.table_xml
                   (
                    TransUnionId	VARCHAR
                    ,AccountId	VARCHAR
                    ,MachineName VARCHAR
                    ,RequestXml	VARCHAR
                    ,ResponseXml	VARCHAR
                    ,SourceReferenceId	VARCHAR
                    ,StatusCode	VARCHAR
                    ,StatusReason	VARCHAR
                    ,CreatedBy	VARCHAR
                    ,CreatedDate	VARCHAR
                    ,BureauRequestTimestamp	 VARCHAR
                    ,BureauResponseTimestamp	VARCHAR
                    ,CleansedRequestXML	VARCHAR
                    ,CleansedResponseXML	VARCHAR
                    ,UpdatedDate    VARCHAR  
                    )
                    DATA_RETENTION_TIME_IN_DAYS = 1;
                       
show tables like '%table_xml%';
select * from test.table_xml;

-- file format 
CREATE OR REPLACE FILE FORMAT test.Test_CSV_Format
                       Type = 'CSV'
                       FIELD_DELIMITER  = ','
                       FIELD_OPTIONALLY_ENCLOSED_BY  = '"'
                       skip_header = 1;
                      
SHOW FILE FORMATS like '%Test_CSV_Format%'                      ;

// from snowsql
// snowsql -a account_name -u Sri
// use database TEST_XML_DATA;
// use role ACCOUNTADMIN;
// use WAREHOUSE LOAD_WH;
// use schema test;

// srikanthmarella#LOAD_WH@TEST_XML_DATA.TEST>PUT file:///C:\Users\srikanth.marella\Documents\GitHub\Snowflake\Semi-Struct
//                                            ured\xml_transunion\*.csv @TEST_XML_DATA.test.%table_XML;
// 1_transunion.csv_c.gz(0.87MB): [##########] 100.00% Done (4.571s, 0.19MB/s).
// 0_transunion.csv_c.gz(0.79MB): [##########] 100.00% Done (4.896s, 0.16MB/s).
// 2_transunion.csv_c.gz(0.87MB): [##########] 100.00% Done (5.391s, 0.16MB/s).
// 3_transunion.csv_c.gz(0.86MB): [##########] 100.00% Done (6.511s, 0.13MB/s).
// 4_transunion.csv_c.gz(0.84MB): [##########] 100.00% Done (4.358s, 0.19MB/s).
// +------------------+---------------------+-------------+-------------+--------------------+--------------------+----------+---------+
// | source           | target              | source_size | target_size | source_compression | target_compression | status   | message |
// |------------------+---------------------+-------------+-------------+--------------------+--------------------+----------+---------|
// | 0_transunion.csv | 0_transunion.csv.gz |     2302562 |      830166 | NONE               | GZIP               | UPLOADED |         |
// | 1_transunion.csv | 1_transunion.csv.gz |     2522725 |      915844 | NONE               | GZIP               | UPLOADED |         |
// | 2_transunion.csv | 2_transunion.csv.gz |     2501549 |      914467 | NONE               | GZIP               | UPLOADED |         |
// | 3_transunion.csv | 3_transunion.csv.gz |     2465257 |      896634 | NONE               | GZIP               | UPLOADED |         |
// | 4_transunion.csv | 4_transunion.csv.gz |     2419148 |      880288 | NONE               | GZIP               | UPLOADED |         |
// +------------------+---------------------+-------------+-------------+--------------------+--------------------+----------+---------+
// 5 Row(s) produced. Time Elapsed: 15.697s

// 
// 
// Sri#LOAD_WH@TEST_XML_DATA.TEST>list @TEST_XML_DATA.test.%table_XML;
// +----------------------------+-----------+------+-------------------------------+
// | name                       |      size | md5  | last_modified                 |
// |----------------------------+-----------+------+-------------------------------|
// | Relational_XML_Data.csv.gz | 493285712 | NULL | Wed, 22 Jul 2020 21:20:35 GMT |
// +----------------------------+-----------+------+-------------------------------+
// 1 Row(s) produced. Time Elapsed: 1.434s
// 
// 
// Sri#LOAD_WH@TEST_JSON_DATA.TEST>select top 1  t.$1, t.$2, t.$3, t.$4, t.$5, t.$6 from '@%table_xml' (file_format => test.Test_CSV_Format) t;
// 
// 


list @TEST_XML_DATA.test.%table_XML;
select top 1  * from '@%table_xml' (file_format => test.Test_CSV_Format) t;

select 
top 1 
   -- * 
   -- t.$1 ,t.$2 ,t.$3 ,t.$4 ,t.$5 
   -- ,t.$6 ,t.$7 ,t.$8 ,t.$9 ,t.$10 ,t.$11 ,t.$12
  parse_xml(t.$13) ,parse_xml(t.$14) ,t.$15
from '@%table_xml'
(file_format => test.Test_CSV_Format) t;
  

COPY INTO test.table_xml from '@TEST_XML_DATA.test.%table_xml' file_format =(FORMAT_NAME = test.Test_CSV_Format)  force = true;

-- took 1min 39s 470.4MB
copy into test.table_xml
(  
  TransUnionId ,AccountId	,MachineName ,RequestXml ,ResponseXml ,SourceReferenceId ,StatusCode ,StatusReason	,CreatedBy	,CreatedDate	,BureauRequestTimestamp	 
  ,BureauResponseTimestamp	,CleansedRequestXML	,CleansedResponseXML	,UpdatedDate  
)
from (
  select
  -- top 1
  -- * 
  t.$1, t.$2, t.$3, t.$4, t.$5, try_cast(t.$6 as INTEGER), t.$7, t.$8, t.$9, t.$10, t.$11, t.$12 , t.$13, t.$14, t.$15
  from '@%table_xml' t
)
file_format = (FORMAT_NAME  = test.Test_CSV_Format)
FORCE = TRUE ; 


select top 100 * from test.table_xml;


-- explode 
select
    t.TRANSUNIONID
    ,f.*
from test.table_xml as t
,lateral flatten (parse_xml(t.CleansedResponseXML))  as f
WHERE t.TRANSUNIONID = 124916;

-- working example
select
    t.TRANSUNIONID
    -- ,f.*
    ,f.key
    ,f.value
    ,f.path
from test.table_xml as t
,lateral flatten (parse_xml(t.CleansedResponseXML), recursive => true)  as f
WHERE t.TRANSUNIONID = 124916;


select
    t.TRANSUNIONID
    ,f.*
    ,typeof(f.value) as "Type"
from test.table_xml as t
,lateral flatten (parse_xml(t.CleansedResponseXML), recursive => TRUE)  as f
WHERE t.TRANSUNIONID = 124916
AND "Type" not in ('OBJECT','ARRAY', 'VARIANT', 'XML')  -- get the parsed data 
AND ( KEY LIKE '$%' OR  KEY LIKE '@%');
-- and f.value = 'rank';

select
       XMLGET( xmldata, 'dept_id' ):"$"::string AS dept_id
     , XMLGET( xmldata, 'dept_name' ):"$"::string AS dept_name
     , XMLGET( emp.value, 'emp_id' ):"$"::integer as emp_id
     , XMLGET( emp.value, 'emp_fname' ):"$"::string as emp_fname
     , XMLGET( emp.value, 'emp_lname' ):"$"::string as emp_lname
     , XMLGET( emp.value, 'emp_title' ):"$"::string as emp_title
     , XMLGET( emp.value, 'emp_ssn' ):"$"::string as emp_ssn
from
    dept_emp_addr
    ,  lateral FLATTEN(dept_emp_addr.xmldata:"$") emp
  where GET( emp.value, '@') = 'employee'
  order by dept_id, emp_id ;


SELECT 
  GET(Elements.value, '@')::string nodeType
FROM 
  test.table_xml as t,
  LATERAL FLATTEN(GET(t.CleansedResponseXML, '$')) Elements;

select 
*
from test.table_xml
    ,  lateral FLATTEN(parse_xml(table_xml.CLEANSEDRESPONSEXML):"$") emp
WHERE TRANSUNIONID = 124916;


select 
f.*
,GET(f.value, '@')::string nodetype 
from test.table_xml as t
    ,  lateral FLATTEN(parse_xml(t.CLEANSEDRESPONSEXML):"$") f
WHERE t.TRANSUNIONID = 124916;    

-- [3]['$'][1]['$'][1]['$'][5]['$'][2]['$'][25]['$'][1]     
SELECT 
 GET(f.value, '@')::string nodetype
,GET(f.value, '$')::string nodetype_value
-- ,f.value
,f.PATH
,RIGHT(f.PATH,3) 
,f.*
-- ,typeof(f.value) as "Type"
-- ,typeof(f.value) as "Type"
from test.table_xml as t
    ,  lateral FLATTEN(to_array(parse_xml(t.CLEANSEDRESPONSEXML):"$"), recursive => true) f
WHERE t.TRANSUNIONID = 124916
--AND "Type" not in ('OBJECT','ARRAY', 'VARIANT', 'XML');
AND left(nodetype_value, 1) NOT IN  ('[','<')
AND NODETYPE IS NOT NULL
and nodetype = 'algorithmID';
--and "Type" not in ('OBJECT','ARRAY', 'VARIANT', 'XML');

select 


f.*
,GET(f.value, '@')::string nodetype 
,GET(f.value, '$')::string nodetype_value 
,typeof(GET(f.value, '$')) as "Type"
-- ,GET(f2.value, '@')::string nodetype 
-- ,GET(f3.value, '@')::string nodetype 
-- ,GET(f3.value, '$')::string nodetype 
-- ,XMLGET(f3.value,'industryCode'):"$"::string transactionControl
-- ,f3.*
from test.table_xml as t
    , lateral FLATTEN(GET(parse_xml(t.CLEANSEDRESPONSEXML),'$'), recursive => true) f
    -- , lateral FLATTEN(GET(parse_xml(f.value),'$')) f2
    -- , lateral FLATTEN(GET(parse_xml(f2.value),'$')) f3
WHERE t.TRANSUNIONID = 124916;
--AND "Type" not in ('OBJECT','ARRAY', 'VARIANT', 'XML')  -- get the parsed data 
--and NODETYPE IS NOT NULL;

select 
-- f.*
-- ,GET(f.value, '@')::string nodetype 
-- ,GET(f.value, '$')::string nodetype_value 
-- ,GET(f2.value, '@')::string nodetype 
GET(f3.value, '@')::string nodetype 
,GET(f3.value, '$')::string nodetype 
-- ,XMLGET(f3.value,'industryCode'):"$"::string transactionControl
-- ,f3.*
from test.table_xml as t
    , lateral FLATTEN(GET(parse_xml(t.CLEANSEDRESPONSEXML),'$'), recursive => true) f
    , lateral FLATTEN(GET(f.value,'$')) f2
    , lateral FLATTEN(GET(f2.value,'$')) f3
WHERE t.TRANSUNIONID = 124916;
--AND "Type" not in ('OBJECT','ARRAY', 'VARIANT', 'XML')  -- get the parsed data 
--and NODETYPE IS NOT NULL;



select x('path')
from a ;

-----------------------------------------------------------------------------------------------------------


-- full table data 
select * from test.table_xml
where transunionid = '124692';


SELECT 
  Elements.* 
FROM 
  test.table_xml,
  LATERAL FLATTEN(GET(parse_xml(CLEANSEDRESPONSEXML), '$'), recursive => true) Elements
where transunionid = '124692';


SELECT 
  GET(Elements.value, '@')::string nodeType, count(*) 
FROM 
  test.table_xml,
  LATERAL FLATTEN(GET(parse_xml(CLEANSEDRESPONSEXML), '$')) Elements
where transunionid = '124692'
group by nodeType;


SELECT 
  GET(Elements.value, '@')::string nodeType, count(*) 
FROM 
  test.table_xml,
  LATERAL FLATTEN(GET(parse_xml(CLEANSEDRESPONSEXML), '$'), recursive => true) Elements
where transunionid = '124692'
group by nodeType;


SELECT 
  GET(Elements.value, '@')::string nodeType
  , GET(Elements.value, '$')::string nodeType
FROM 
  test.table_xml,
  LATERAL FLATTEN(GET(parse_xml(CLEANSEDRESPONSEXML), '$'), recursive => true) Elements
where transunionid = '124692';

SELECT 
   GET(Elements.value, '@')::string nodeType
  ,GET(Elements.value, '$')::string nodeType_value
  ,typeof(Elements.value) as "Type"
FROM 
  test.table_xml,
  LATERAL FLATTEN(GET(parse_xml(CLEANSEDRESPONSEXML), '$'), recursive => true) Elements
where transunionid = '124692'
and NodeType IS NOT NULL and NodeType_value IS NOT NULL;
-- and "Type" not in ('OBJECT','ARRAY', 'VARIANT', 'XML');


-- exploding and parsing 
select 
 parse_xml(CLEANSEDRESPONSEXML) as xml,
-- GET( parse_xml(CLEANSEDRESPONSEXML), '$' ), -- all xml data 
GET( parse_xml(CLEANSEDRESPONSEXML), '@' ),
GET( parse_xml(CLEANSEDRESPONSEXML), '@xmlns:xsi' ),
GET( XMLGET( parse_xml(CLEANSEDRESPONSEXML), 'version'), '$')::String as version,
GET( XMLGET( parse_xml(CLEANSEDRESPONSEXML), 'document'), '$')::String as document,
GET( XMLGET( parse_xml(CLEANSEDRESPONSEXML), 'transactionControl'), '$')::String as transactionControl,
GET( XMLGET( parse_xml(CLEANSEDRESPONSEXML), 'product'), '$')::String as product
from test.table_xml
where transunionid = '124692';


select distinct
parse_xml(CLEANSEDRESPONSEXML) as xml,
-- GET( parse_xml(CLEANSEDRESPONSEXML), '$' ), -- all xml data 
-- GET( parse_xml(CLEANSEDRESPONSEXML), '@' ),
-- GET( parse_xml(CLEANSEDRESPONSEXML), '@xmlns:xsi' ),
-- GET( XMLGET( parse_xml(CLEANSEDRESPONSEXML), 'version'), '$')::String as version,
-- GET( XMLGET( parse_xml(CLEANSEDRESPONSEXML), 'document'), '$')::String as document,
GET( XMLGET( parse_xml(CLEANSEDRESPONSEXML), 'transactionControl'), '$') as transactionControl,
-- GET( XMLGET( parse_xml(CLEANSEDRESPONSEXML), 'product'), '$')::String as product,
xml_doc.Index,
xml_doc.value,

GET( parse_xml(xml_doc.value),'@')::String as subscriber_key,
GET( parse_xml(xml_doc.value),'$')::String as subscriber_value,
GET( XMLGET( parse_xml(xml_doc.value), 'industryCode'), '$')::String as subscriber_industryCode,
GET( XMLGET( parse_xml(xml_doc.value), 'memberCode'), '$')::String as subscriber_memberCode,
GET( XMLGET( parse_xml(xml_doc.value), 'inquirySubscriberPrefixCode'), '$')::String as subscriber_inquirySubscriberPrefixCode

from test.table_xml,
LATERAL FLATTEN(transactionControl) xml_doc

where transunionid = '124692';



-- exploding and parsing nested data ex: product
select 
-- GET( parse_xml(CLEANSEDRESPONSEXML), '$' ), all xml data 
GET( parse_xml(t.CLEANSEDRESPONSEXML), '@' ),
GET( parse_xml(t.CLEANSEDRESPONSEXML), '@xmlns:xsi' ),
GET( XMLGET( parse_xml(t.CLEANSEDRESPONSEXML), 'version'), '$')::String as version,
GET( XMLGET( parse_xml(t.CLEANSEDRESPONSEXML), 'document'), '$')::String as document,
GET( XMLGET( parse_xml(t.CLEANSEDRESPONSEXML), 'transactionControl'), '$')::String as transactionControl,
GET( XMLGET( parse_xml(t.CLEANSEDRESPONSEXML), 'product'), '$')::String as product,
GET( XMLGET( p.value, 'code'), '$')::String as p_code,
GET( XMLGET( p.value, 'subject'), '$')::String as p_subject,
GET( XMLGET( ps.value, 'number'), '$')::String as ps_number,
GET( XMLGET( ps.value, 'subjectRecord'), '$')::String as ps_subjectRecord,
ps.*
from test.table_xml as t
, lateral flatten (parse_xml(t.CLEANSEDRESPONSEXML):"$" ) as p
, lateral flatten (GET( XMLGET( p.value, 'subject'), '$') ) as ps
where transunionid = '124692'
and GET(p.value, '@') = 'product';

-- just explode at high level for one row 
select
    f.*,
    t.CLEANSEDRESPONSEXML
from test.table_xml as t
, lateral flatten ( input => parse_xml(t.CLEANSEDRESPONSEXML)) as f
where transunionid = '124692';

select
    f.*,
    t.CLEANSEDRESPONSEXML
from test.table_xml as t
, lateral flatten ( input => parse_xml(t.CLEANSEDRESPONSEXML):"$") as f
where transunionid = '124692';



select
    GET(parse_xml(t.CLEANSEDRESPONSEXML), '')
from test.table_xml as t
, lateral flatten ( input => parse_xml(t.CLEANSEDRESPONSEXML):"$") as f
where transunionid = '124692';




select
     XMLGET(f.value, 'userRefNumber'):"$"::string  as userRefNumber,
     XMLGET(f.value, 'version'):"$"::string  as version,
     XMLGET(f.value, 'document'):"$"::string  as document,
     XMLGET(f.value, 'code'):"$"::string  as code
from test.table_xml as t
, lateral flatten ( input => parse_xml(t.CLEANSEDRESPONSEXML):"$") as f
where transunionid = '124692';



